"use strict";
/**
 * Copyright 2020, SumUp Ltd.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.savePackageJson = exports.addPackageScript = exports.findPackageJson = exports.writeFile = exports.formatContent = void 0;
const fs_1 = __importDefault(require("fs"));
const path_1 = __importDefault(require("path"));
const util_1 = require("util");
const prettier_1 = require("prettier");
const pkg_up_1 = __importDefault(require("pkg-up"));
const prettier_2 = __importDefault(require("../prettier"));
const writeFileAsync = util_1.promisify(fs_1.default.writeFile);
function formatContent(fileName, content) {
    const configMap = {
        '.js': prettier_2.default({}, { parser: 'babel' }),
        '.json': { parser: 'json' },
        '.yaml': { parser: 'yaml' },
    };
    const extension = path_1.default.extname(fileName);
    const formatConfig = configMap[extension];
    if (!formatConfig) {
        return content;
    }
    return prettier_1.format(content, formatConfig);
}
exports.formatContent = formatContent;
function writeFile(configDir, fileName, content, shouldOverwrite = false) {
    const fileContent = formatContent(fileName, content);
    const filePath = path_1.default.join(configDir, fileName);
    const directory = path_1.default.dirname(filePath);
    if (directory && directory !== '.') {
        fs_1.default.mkdirSync(directory, { recursive: true });
    }
    const flag = shouldOverwrite ? 'w' : 'wx';
    return writeFileAsync(filePath, fileContent, { flag });
}
exports.writeFile = writeFile;
async function findPackageJson() {
    const packagePath = await pkg_up_1.default();
    if (!packagePath) {
        throw new Error('Unable to find a "package.json" file.');
    }
    return packagePath;
}
exports.findPackageJson = findPackageJson;
function addPackageScript(packageJson, name, command, shouldOverwrite = false) {
    if (!packageJson.scripts) {
        // eslint-disable-next-line no-param-reassign
        packageJson.scripts = { [name]: command };
        return packageJson;
    }
    const hasConflict = Boolean(packageJson.scripts[name]);
    if (hasConflict && !shouldOverwrite) {
        throw new Error(`A script with the name "${name}" already exists.`);
    }
    // eslint-disable-next-line no-param-reassign
    packageJson.scripts[name] = command;
    return packageJson;
}
exports.addPackageScript = addPackageScript;
async function savePackageJson(packageJson) {
    const packagePath = await findPackageJson();
    const content = `${JSON.stringify(packageJson, null, 2)}\n`;
    return writeFileAsync(packagePath, content);
}
exports.savePackageJson = savePackageJson;
