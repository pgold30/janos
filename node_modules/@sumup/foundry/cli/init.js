"use strict";
/**
 * Copyright 2019, SumUp Ltd.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.validatePath = exports.validatePresets = exports.mergeOptions = exports.init = void 0;
const fs_1 = require("fs");
const path_1 = require("path");
const inquirer_1 = __importDefault(require("inquirer"));
const listr_1 = __importDefault(require("listr"));
const listr_inquirer_1 = __importDefault(require("listr-inquirer"));
const fp_1 = require("lodash/fp");
const shared_1 = require("../types/shared");
const logger = __importStar(require("../lib/logger"));
const choices_1 = require("../lib/choices");
const files_1 = require("../lib/files");
const presets_1 = require("../presets");
const configs_1 = require("../configs");
async function init(args) {
    const initialAnswers = await inquirer_1.default.prompt([
        {
            type: 'checkbox',
            name: 'presets',
            message: 'Which presets do you want to use?',
            choices: presets_1.presetChoices,
            default: args.presets,
            validate: validatePresets,
            when: () => validatePresets(args.presets) !== true,
        },
    ]);
    const prompts = {
        [shared_1.Prompt.LANGUAGE]: {
            type: 'list',
            name: 'language',
            message: 'Which programming language does the project use?',
            choices: choices_1.enumToChoices(shared_1.Language),
            default: shared_1.Language.TYPESCRIPT,
            when: () => !args.language,
        },
        [shared_1.Prompt.ENVIRONMENTS]: {
            type: 'checkbox',
            name: 'environments',
            message: 'Which environment(s) will the code run in?',
            choices: choices_1.enumToChoices(shared_1.Environment),
            when: () => fp_1.isEmpty(args.environments),
        },
        [shared_1.Prompt.FRAMEWORKS]: {
            type: 'checkbox',
            name: 'frameworks',
            message: 'Which framework(s) does the project use?',
            choices: choices_1.enumToChoices(shared_1.Framework),
            when: () => !args.frameworks,
        },
        [shared_1.Prompt.CI]: {
            type: 'checkbox',
            name: 'ci',
            message: 'Which CI platform would you like to use?',
            choices: choices_1.enumToChoices(shared_1.CI),
            when: () => fp_1.isEmpty(args.ci),
        },
        [shared_1.Prompt.PUBLISH]: {
            type: 'confirm',
            name: 'publish',
            message: 'Would you like to publish your package to NPM?',
            default: false,
            when: () => typeof args.publish === 'undefined',
        },
        [shared_1.Prompt.OPEN_SOURCE]: {
            type: 'confirm',
            name: 'openSource',
            message: 'Do you plan to open-source this project?',
            default: false,
            when: () => typeof args.openSource === 'undefined',
        },
    };
    const additionalPrompts = getPromptsForPresets(initialAnswers.presets, prompts);
    const additionalAnswers = await inquirer_1.default.prompt(additionalPrompts);
    const answers = Object.assign(Object.assign({}, initialAnswers), additionalAnswers);
    const options = mergeOptions(args, answers);
    const selectedTools = getToolsForPresets(options.presets);
    const files = getFilesForTools(options, selectedTools);
    const scripts = getScriptsForTools(options, selectedTools);
    logger.empty();
    const tasks = new listr_1.default([
        {
            title: 'Writing config files',
            task: () => new listr_1.default(files.map((file) => ({
                title: `Write "${file.name}"`,
                task: (ctx, task) => files_1.writeFile(options.configDir, file.name, file.content, options.overwrite).catch(() => listr_inquirer_1.default([
                    {
                        type: 'confirm',
                        name: 'overwrite',
                        // eslint-disable-next-line max-len
                        message: `"${file.name}" already exists. Would you like to replace it?`,
                        default: false,
                    },
                ], ({ overwrite }) => {
                    if (!overwrite) {
                        task.skip('Skipped');
                        return;
                    }
                    files_1.writeFile(options.configDir, file.name, file.content, true);
                })),
            }))),
        },
        {
            title: 'Adding scripts to package.json',
            // eslint-disable-next-line @typescript-eslint/require-await
            task: async () => {
                return new listr_1.default([
                    {
                        title: 'Read package.json',
                        task: async (ctx) => {
                            ctx.packagePath = await files_1.findPackageJson();
                            // eslint-disable-next-line import/no-dynamic-require, global-require
                            ctx.packageJson = require(ctx.packagePath);
                        },
                    },
                    ...scripts.map(({ name, command }) => ({
                        title: `Add "${name}"`,
                        task: (ctx, task) => {
                            try {
                                files_1.addPackageScript(ctx.packageJson, name, command, options.overwrite);
                                return undefined;
                            }
                            catch (error) {
                                return listr_inquirer_1.default([
                                    {
                                        type: 'confirm',
                                        name: 'overwriteScript',
                                        // eslint-disable-next-line max-len
                                        message: `"${name}" already exists. Would you like to replace it?`,
                                        default: false,
                                    },
                                ], ({ overwrite }) => {
                                    if (!overwrite) {
                                        task.skip('Skipped');
                                        return;
                                    }
                                    files_1.addPackageScript(ctx.packageJson, name, command, true);
                                });
                            }
                        },
                    })),
                    {
                        title: 'Save package.json',
                        task: (ctx) => files_1.savePackageJson(ctx.packageJson),
                    },
                ]);
            },
        },
    ]);
    tasks
        .run()
        .then(() => {
        logger.empty();
        logger.info('Added the following scripts to "package.json":');
        logger.empty();
        scripts.forEach(({ name, description }) => {
            logger.log(`  "${name}": ${description}`);
        });
    })
        .catch((error) => {
        logger.error(error);
        process.exit(1);
    });
}
exports.init = init;
function mergeOptions(args, answers) {
    const { $0, _ } = args, rest = __rest(args, ["$0", "_"]);
    return Object.assign(Object.assign({}, rest), answers);
}
exports.mergeOptions = mergeOptions;
function getPromptsForPresets(selectedPresets, prompts) {
    return fp_1.flow(fp_1.map((preset) => presets_1.presets[preset].prompts), fp_1.flatten, fp_1.uniq, fp_1.map((prompt) => prompts[prompt]))(selectedPresets);
}
function getToolsForPresets(selectedPresets) {
    return fp_1.flow(fp_1.map((preset) => presets_1.presets[preset].tools), fp_1.flatten, fp_1.uniq, fp_1.map((tool) => configs_1.tools[tool]))(selectedPresets);
}
function getFilesForTools(options, selectedTools) {
    return selectedTools.reduce((allFiles, tool) => {
        if (tool.files) {
            const filesForTool = tool.files(options);
            allFiles.push(...filesForTool);
        }
        return allFiles;
    }, []);
}
function getScriptsForTools(options, selectedTools) {
    return selectedTools.reduce((allScripts, tool) => {
        if (tool.scripts) {
            const scriptsForTool = tool.scripts(options);
            return [...allScripts, ...scriptsForTool];
        }
        return allScripts;
    }, []);
}
function validatePresets(selectedPresets) {
    if (fp_1.isEmpty(selectedPresets)) {
        return 'You must choose at least one preset.';
    }
    return true;
}
exports.validatePresets = validatePresets;
function validatePath(path) {
    if (!path) {
        return false;
    }
    const resolvedPath = path_1.resolve(path);
    if (!fs_1.existsSync(resolvedPath)) {
        return `The path "${resolvedPath}" doesn't exist. Please try another one.`;
    }
    return true;
}
exports.validatePath = validatePath;
