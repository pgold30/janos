"use strict";
/**
 * Copyright 2019, SumUp Ltd.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.config = void 0;
const fs_1 = require("fs");
const path_1 = require("path");
const logger = __importStar(require("../../lib/logger"));
const shared_1 = require("../../types/shared");
var ComponentType;
(function (ComponentType) {
    ComponentType["STYLED"] = "styled";
    ComponentType["FUNCTIONAL"] = "functional";
    ComponentType["CLASS"] = "class";
})(ComponentType || (ComponentType = {}));
var FileType;
(function (FileType) {
    FileType["COMPONENT"] = "component";
    FileType["COMPONENT_SPEC"] = "component-spec";
    FileType["STORY"] = "story";
    FileType["SERVICE"] = "service";
    FileType["SERVICE_SPEC"] = "service-spec";
    FileType["INDEX"] = "index";
})(FileType || (FileType = {}));
const ERRORS = {
    INVALID_FILE_TYPE: (file) => `We don't have templates for "${file}" files, ðŸ˜ž.`,
    INVALID_DESTINATION: (path) => `We couldn't find the destination folder ${path} in your project, ðŸ¤·.`,
};
function config(options) {
    return (plop) => {
        plop.setHelper('eq', (a, b) => a === b);
        plop.setHelper('not', (a, b) => a !== b);
        const pascalCase = plop.getHelper('pascalCase');
        /**
         * Generating React components and helper files.
         */
        plop.setGenerator('component', {
            description: 'React component',
            prompts: [
                // Component name
                {
                    type: 'input',
                    name: 'name',
                    message: "What's the name of your component?",
                },
                // Component type
                {
                    type: 'list',
                    name: 'componentType',
                    message: 'What type of component do you need?',
                    choices: [
                        {
                            name: 'Styled',
                            value: ComponentType.STYLED,
                        },
                        {
                            name: 'Functional',
                            value: ComponentType.FUNCTIONAL,
                        },
                        {
                            name: 'Class',
                            value: ComponentType.CLASS,
                        },
                    ],
                    default: 'functional',
                },
                // Get the path
                {
                    type: 'input',
                    name: 'destinationPath',
                    message: 'Where would you like to put your component?',
                    default: path_1.relative(process.cwd(), `${plop.getPlopfilePath()}/src/components`),
                },
                // Files
                {
                    type: 'checkbox',
                    name: 'files',
                    message: 'Which files does your component need?',
                    choices: [
                        {
                            name: 'Component',
                            value: FileType.COMPONENT,
                            checked: true,
                        },
                        {
                            name: 'Component spec',
                            value: FileType.COMPONENT_SPEC,
                            checked: true,
                        },
                        {
                            name: 'Story',
                            value: FileType.STORY,
                            checked: false,
                        },
                        {
                            name: 'Service',
                            value: FileType.SERVICE,
                            checked: false,
                        },
                        {
                            name: 'Service spec',
                            value: FileType.SERVICE_SPEC,
                            checked: false,
                        },
                    ],
                },
            ],
            actions: ({ name: componentName, componentType, files, destinationPath, }) => {
                const plopfilePath = plop.getPlopfilePath();
                const absDestPath = path_1.join(plopfilePath, destinationPath);
                if (!fs_1.existsSync(absDestPath)) {
                    raiseErrorAndExit(ERRORS.INVALID_DESTINATION(absDestPath));
                }
                const capitalizedName = pascalCase(componentName);
                const allFiles = files.includes(FileType.COMPONENT)
                    ? files.concat(FileType.INDEX)
                    : files;
                return allFiles.reduce((acc, file) => {
                    if (!Object.values(FileType).includes(file)) {
                        raiseErrorAndExit(ERRORS.INVALID_FILE_TYPE(file));
                    }
                    const templateFileName = file === FileType.COMPONENT
                        ? getComponentTemplateName(componentType)
                        : `${file}.hbs`;
                    return [
                        ...acc,
                        {
                            type: 'add',
                            path: path_1.join(absDestPath, capitalizedName, getFileName(options.language, file, componentName)),
                            templateFile: getTemplatePath(options.language, options.templateDir, plopfilePath, templateFileName),
                        },
                    ];
                }, []);
            },
        });
    };
}
exports.config = config;
function raiseErrorAndExit(message) {
    logger.error([message, 'Please try again. ðŸ‘‹'].join(' '));
    process.exit(1);
}
function getComponentTemplateName(type) {
    const templateNameMap = {
        [ComponentType.STYLED]: 'styled-component.hbs',
        [ComponentType.FUNCTIONAL]: 'functional-component.hbs',
        [ComponentType.CLASS]: 'class-component.hbs',
    };
    return templateNameMap[type];
}
const JS_EXTENSIONS = {
    [shared_1.Language.JAVASCRIPT]: 'js',
    [shared_1.Language.TYPESCRIPT]: 'ts',
};
const JSX_EXTENSIONS = {
    [shared_1.Language.JAVASCRIPT]: 'js',
    [shared_1.Language.TYPESCRIPT]: 'tsx',
};
function getFileName(language, fileType, componentName) {
    const jsExtension = JS_EXTENSIONS[language];
    const jsxExtension = JSX_EXTENSIONS[language];
    const fileNameMap = {
        [FileType.COMPONENT]: `${componentName}.${jsxExtension}`,
        [FileType.COMPONENT_SPEC]: `${componentName}.spec.${jsxExtension}`,
        [FileType.STORY]: `${componentName}.story.${jsxExtension}`,
        [FileType.SERVICE]: `${componentName}Service.${jsExtension}`,
        [FileType.SERVICE_SPEC]: `${componentName}Service.spec.${jsExtension}`,
        [FileType.INDEX]: `index.${jsExtension}`,
    };
    return fileNameMap[fileType];
}
const LANGUAGE_DIRS = {
    [shared_1.Language.JAVASCRIPT]: 'js',
    [shared_1.Language.TYPESCRIPT]: 'ts',
};
function getTemplatePath(language, templateDir, plopDir, templateFileName) {
    if (templateDir) {
        const customPath = path_1.join(plopDir, templateDir, templateFileName);
        if (fs_1.existsSync(customPath)) {
            return customPath;
        }
    }
    const languageDir = LANGUAGE_DIRS[language];
    return path_1.join(__dirname, 'templates', languageDir, templateFileName);
}
