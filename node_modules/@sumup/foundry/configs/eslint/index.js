"use strict";
/**
 * Copyright 2020, SumUp Ltd.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.scripts = exports.files = void 0;
const dedent_1 = __importDefault(require("dedent"));
const fp_1 = require("lodash/fp");
const shared_1 = require("../../types/shared");
exports.files = (options) => [
    {
        name: '.eslintrc.js',
        content: `
    module.exports = require('@sumup/foundry/eslint')(${JSON.stringify(fp_1.pick(['language', 'environments', 'frameworks', 'openSource'], options))})`,
    },
    {
        name: '.eslintignore',
        content: `${dedent_1.default `
      node_modules/
      build/
      dist/
      .next/
      .out/
      static/
      public/
      coverage/
      __coverage__/
      __reports__/
      /*.config.js
      /*rc.js
      plopfile.js
      tsconfig.json
    `}\n`,
    },
];
exports.scripts = (options) => {
    const { language = shared_1.Language.TYPESCRIPT } = options;
    const extensionMap = {
        [shared_1.Language.TYPESCRIPT]: '.js,.jsx,.json,.ts,.tsx',
        [shared_1.Language.JAVASCRIPT]: '.js,.jsx,.json',
    };
    const extensions = extensionMap[language];
    return [
        {
            name: 'lint',
            command: `foundry run eslint . --ext ${extensions}`,
            description: 'check files for problematic patterns and report them',
        },
        {
            name: 'lint:fix',
            command: 'yarn lint --fix',
            description: 'same as `lint`, but also try to fix the issues',
        },
        {
            name: 'lint:ci',
            command: 'yarn lint --format junit -o __reports__/eslint-results.xml',
            description: 'same as `lint`, but also save the report to a file',
        },
    ];
};
