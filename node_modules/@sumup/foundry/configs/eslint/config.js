"use strict";
/**
 * Copyright 2019, SumUp Ltd.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.createConfig = exports.customizeConfig = void 0;
const process_1 = __importDefault(require("process"));
const fp_1 = require("lodash/fp");
const shared_1 = require("../../types/shared");
exports.customizeConfig = fp_1.mergeWith(customizer);
function customizer(objValue, srcValue, key) {
    if (fp_1.isArray(objValue)) {
        return fp_1.uniq([...objValue, ...srcValue]);
    }
    if (fp_1.isObject(objValue)) {
        return key === 'rules' ? Object.assign(Object.assign({}, objValue), srcValue) : undefined;
    }
    return undefined;
}
const base = {
    root: true,
    extends: [
        'eslint:recommended',
        'plugin:prettier/recommended',
        'plugin:json/recommended',
    ],
    plugins: ['prettier'],
    rules: {
        'curly': ['error', 'all'],
        'no-use-before-define': 'off',
        'no-confusing-arrow': 'off',
        'max-len': [
            'error',
            {
                code: 80,
                tabWidth: 2,
                ignoreComments: true,
                ignoreUrls: true,
                ignoreStrings: true,
                ignoreTemplateLiterals: true,
                ignoreRegExpLiterals: true,
                ignorePattern: '^(?:import\\s|export\\s|\\s*it(?:\\.(?:skip|only))?\\()',
            },
        ],
        'no-underscore-dangle': [
            'error',
            { allow: ['__DEV__', '__PRODUCTION__', '__TEST__'] },
        ],
        'import/prefer-default-export': 'off',
        'import/order': ['error', { 'newlines-between': 'always' }],
        // The rules below are already covered by prettier.
        'quote-props': 'off',
        'comma-dangle': 'off',
        'object-curly-newline': 'off',
        'implicit-arrow-linebreak': 'off',
        'function-paren-newline': 'off',
        'operator-linebreak': 'off',
        'indent': 'off',
    },
    globals: {
        __DEV__: true,
        __PRODUCTION__: true,
        __TEST__: true,
    },
    overrides: [
        {
            files: [
                '**/*.story.*',
                '**/*.stories.*',
                '**/setupTests.*',
                '**/test-utils.*',
            ],
            rules: {
                'import/no-extraneous-dependencies': 'off',
            },
        },
        {
            files: ['**/*.json'],
            rules: {
                'notice/notice': 'off',
            },
        },
    ],
};
function customizeLanguage(language) {
    const languageMap = {
        [shared_1.Language.TYPESCRIPT]: {
            extends: [
                'airbnb-typescript/base',
                'plugin:@typescript-eslint/eslint-recommended',
                'plugin:@typescript-eslint/recommended',
                'plugin:@typescript-eslint/recommended-requiring-type-checking',
                'prettier/@typescript-eslint',
            ],
            plugins: ['@typescript-eslint'],
            parser: '@typescript-eslint/parser',
            parserOptions: {
                tsconfigRootDir: process_1.default.cwd(),
                project: ['./tsconfig.json'],
                extraFileExtensions: ['.json'],
                sourceType: 'module',
                ecmaVersion: 6,
                ecmaFeatures: {
                    modules: true,
                },
            },
            settings: {
                'import/resolver': {
                    node: {
                        extensions: ['.js', '.jsx', '.ts', '.tsx'],
                    },
                },
            },
            rules: {
                '@typescript-eslint/explicit-function-return-type': 'off',
                '@typescript-eslint/no-use-before-define': [
                    'error',
                    { functions: false },
                ],
                'react/prop-types': 'off',
            },
            overrides: [
                {
                    files: ['**/*.d.ts'],
                    rules: {
                        'spaced-comment': 'off',
                        'node/no-extraneous-import': 'off',
                        'import/no-extraneous-dependencies': [
                            'error',
                            { devDependencies: true },
                        ],
                    },
                },
                {
                    files: ['**/*.spec.*'],
                    rules: {
                        '@typescript-eslint/no-var-requires': 'off',
                    },
                },
            ],
        },
        [shared_1.Language.JAVASCRIPT]: {
            extends: ['airbnb-base'],
            parser: 'babel-eslint',
            parserOptions: {
                sourceType: 'module',
                ecmaVersion: 6,
                ecmaFeatures: {
                    modules: true,
                    impliedStrict: true,
                },
                allowImportExportEverywhere: true,
            },
        },
    };
    return (config) => {
        if (!language) {
            return config;
        }
        const overrides = languageMap[language];
        return exports.customizeConfig(config, overrides);
    };
}
function customizeEnv(environments) {
    const environmentMap = {
        [shared_1.Environment.BROWSER]: {
            env: { browser: true },
        },
        [shared_1.Environment.NODE]: {
            extends: ['plugin:node/recommended'],
            env: { node: true },
            rules: {
                // We don't know if the user's source code is using EJS or CJS.
                'node/no-unsupported-features/es-syntax': 'off',
                // This rule breaks when used in combination with TypeScript
                // and is already covered by similar Eslint rules.
                'node/no-missing-import': 'off',
                // This rule is already covered by similar Eslint rules.
                'node/no-extraneous-import': 'off',
            },
            overrides: [
                {
                    files: ['**/*.spec.*', '**/setupTests.*', '**/test-utils.*'],
                    rules: {
                        'node/no-unpublished-import': 'off',
                    },
                },
            ],
        },
    };
    return (config) => {
        if (!environments || fp_1.isEmpty(environments)) {
            return config;
        }
        return environments.reduce((acc, environment) => {
            const overrides = environmentMap[environment];
            return exports.customizeConfig(acc, overrides);
        }, config);
    };
}
function customizeFramework(frameworks) {
    const frameworkMap = {
        [shared_1.Framework.REACT]: {
            extends: [
                'plugin:react/recommended',
                'plugin:jsx-a11y/recommended',
                'prettier/react',
            ],
            plugins: ['react', 'react-hooks', 'jsx-a11y'],
            rules: {
                'react-hooks/rules-of-hooks': 'error',
                'react-hooks/exhaustive-deps': 'warn',
            },
            parserOptions: { ecmaFeatures: { jsx: true } },
            settings: { react: { version: 'detect' } },
        },
        [shared_1.Framework.EMOTION]: {
            plugins: ['emotion'],
            rules: {
                'emotion/jsx-import': 'off',
                'emotion/no-vanilla': 'error',
                'emotion/import-from-emotion': 'error',
                'emotion/styled-import': 'error',
            },
        },
        [shared_1.Framework.JEST]: {
            extends: ['plugin:jest/recommended'],
            plugins: ['jest'],
            overrides: [
                {
                    files: ['**/*spec.*'],
                    globals: {
                        render: true,
                        create: true,
                        renderToHtml: true,
                        fireEvent: true,
                        userEvent: true,
                        wait: true,
                        act: true,
                        actHook: true,
                        renderHook: true,
                        axe: true,
                    },
                    env: { 'jest/globals': true },
                },
            ],
        },
        [shared_1.Framework.CYPRESS]: {
            extends: ['plugin:cypress/recommended'],
            plugins: ['cypress'],
            overrides: [
                {
                    files: ['**/*spec.*', 'e2e/**/*'],
                    env: { 'cypress/globals': true },
                },
            ],
        },
    };
    return (config) => {
        if (!frameworks || fp_1.isEmpty(frameworks)) {
            return config;
        }
        return frameworks.reduce((acc, framework) => {
            const overrides = frameworkMap[framework];
            return exports.customizeConfig(acc, overrides);
        }, config);
    };
}
function addCopyrightNotice(openSource) {
    return (config) => {
        if (!openSource) {
            return config;
        }
        const copyrightNotice = {
            plugins: ['notice'],
            rules: {
                'notice/notice': [
                    'error',
                    {
                        template: `/**
 * Copyright <%= YEAR %>, <%= NAME %>
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

`,
                        templateVars: { NAME: 'SumUp Ltd.' },
                        varRegexps: { NAME: /SumUp Ltd\./ },
                        onNonMatchingHeader: 'prepend',
                    },
                ],
            },
        };
        return exports.customizeConfig(config, copyrightNotice);
    };
}
function applyOverrides(overrides) {
    return (config) => exports.customizeConfig(config, overrides);
}
function createConfig(options = {}, overrides = {}) {
    return fp_1.flow(customizeLanguage(options.language), customizeEnv(options.environments), customizeFramework(options.frameworks), addCopyrightNotice(options.openSource), applyOverrides(overrides))(base);
}
exports.createConfig = createConfig;
